
#ifndef MENU_HPP
#define MENU_HPP

#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#ifdef _WIN32
#include <conio.h>
#else
#include <termios.h>
#include <unistd.h>
#include <cstdio>
#endif

#ifdef _WIN32
#define CLEAR_SCREEN "cls"
#else
#define CLEAR_SCREEN "clear"
#endif

int show_menu3();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
void printColorText(const std::string& text, int colorCode) {
    // –°–º–µ–Ω–∏–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    std::cout << "\033[" << colorCode << "m" << text << "\033[0m";
}


int show_menu(int selected_option){
const int num_options = 14;
const std::string highlight_start = "\033[1;31m";
const std::string highlight_end = "\033[0m";
std::string separator_part1 = 
"////////////////////////////////////////////////////////// ";
    std::string separator_part2 = "ùñâùñûùñìùñÜùñòùñû ùñîùñã ùñâùñîùñîùñí";
    
    std::string header[] =  {
"        ‚ï≠‚îÅ‚ïÆ        ‚ï≠‚ïÆ",
"‚ï≠‚îÅ‚î≥‚îÅ‚î≥‚î≥‚î≥‚î≥‚î´‚îÅ‚ïã‚îÅ‚î≥‚î≥‚î≥‚î≥‚îÅ‚î≥‚î≥‚î´‚î£‚ïÆ",
"‚îÉ‚îÅ‚î´‚ïã‚îÉ‚îÉ‚îÉ‚ï≠‚ïã‚îÅ‚îÉ‚îª‚î´‚îÉ‚îÉ‚îÉ‚ïã‚îÉ‚ï≠‚î´‚îÅ‚î´",
"‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îª‚ïØ"
    };

std::string options[] = {
"–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫",
"–í—ã–≤–µ—Å—Ç–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç–∫—Ä–∞–Ω",
"–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
"–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
"–í—ã–≤–µ—Å—Ç–∏ –ª—é–¥–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –¥–µ–ø–æ–∑–∏—Ç–æ–º",
"–í—ã–≤–µ—Å—Ç–∏ —É–ª–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–∂–∏–≤–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 
–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
"–í—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
"–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
"–°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
"–°–æ–∑–¥–∞—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª",
"–ü—Ä–æ—á—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞",
"–ü—Ä–æ—á—Ç–µ–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞",
"–û—Ç–∫—Ä—ã—Ç—å GitHub –∞–≤—Ç–æ—Ä–∞",
"–í—ã—Ö–æ–¥"
};

int current_selection = selected_option;
for (;;){
system(CLEAR_SCREEN); 
std::cout << "\033[31m" << separator_part1 << highlight_end << 
separator_part2 << std::endl << std::endl;

for (const auto& line : header)
        printColorText(line+"\n", 37);

for (int i = 1; i <= num_options; ++i){ 
if(i == current_selection){
std::cout << highlight_start << "> " << options[i - 1] << 
highlight_end << std::endl;
} else{
std::cout << " " << options[i - 1] << std::endl;
}
}
std::cout << "\033[31m" << separator_part1 << highlight_end;

int arrow_key = _getch();
if (arrow_key == 0 || arrow_key == 224) {
    arrow_key = _getch();
    if (arrow_key == 72) 
    {
        if (current_selection > 1) {
            current_selection--;
        }
    }
    else if (arrow_key == 80) 
    {
        if (current_selection < num_options) {
            current_selection++;
        }
    }
}
if (arrow_key == 10 || arrow_key == 13){
break;
}
}
return current_selection;
}


int show_menu2(){
system(CLEAR_SCREEN);
const int num_options = 5;

const std::string highlight_start = "\033[1;31m";
const std::string highlight_end = "\033[0m";
std::string separator_part1 = 
"////////////////////////////////////////////////////////// ";
    std::string separator_part2 = "ùñâùñûùñìùñÜùñòùñû ùñîùñã ùñâùñîùñîùñí";
    
    std::string header[] =  {
"        ‚ï≠‚îÅ‚ïÆ        ‚ï≠‚ïÆ",
"‚ï≠‚îÅ‚î≥‚îÅ‚î≥‚î≥‚î≥‚î≥‚î´‚îÅ‚ïã‚îÅ‚î≥‚î≥‚î≥‚î≥‚îÅ‚î≥‚î≥‚î´‚î£‚ïÆ",
"‚îÉ‚îÅ‚î´‚ïã‚îÉ‚îÉ‚îÉ‚ï≠‚ïã‚îÅ‚îÉ‚îª‚î´‚îÉ‚îÉ‚îÉ‚ïã‚îÉ‚ï≠‚î´‚îÅ‚î´",
"‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îª‚ïØ"
    };

std::string options[] = {
"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –≤—ã—Ö–æ–¥",
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –∏ –≤—ã—Ö–æ–¥",
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª—ã –∏ –≤—ã—Ö–æ–¥",
        "–í–µ—Ä–Ω—É—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–µ –º–µ–Ω—é",
        "–í—ã–π—Ç–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
};
int current_selection = 1;

for(;;){
system(CLEAR_SCREEN);
std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:\n";
std::cout << "\033[31m" << separator_part1 << highlight_end << 
separator_part2 << std::endl << std::endl;
for (const auto& line : header)
        printColorText(line+"\n", 37);
for(int i = 1; i <= num_options; ++i){
if(i == current_selection){
std::cout << highlight_start << "> " << options[i - 1] << 
highlight_end << std::endl;
}else{
std::cout << " " << options[i - 1] << std::endl;
}
}
std::cout << "\033[31m" << separator_part1 << highlight_end;

int arrow_key = _getch();
if(arrow_key == 0 || arrow_key == 224){
arrow_key = _getch();
if (arrow_key == 72){
if(current_selection > 1){
current_selection--;
}
}
if (arrow_key == 80){
if (current_selection < num_options){
current_selection++;
}
}
}
if (arrow_key == 10 || arrow_key == 13){
break;
}
}
return current_selection;
}

int show_menu3(){
system(CLEAR_SCREEN);

const std::string highlight_start = "\033[1;31m";
const std::string highlight_end = "\033[0m";
std::string separator_part1 = 
"////////////////////////////////////////////////////////// ";
    std::string separator_part2 = "ùñâùñûùñìùñÜùñòùñû ùñîùñã ùñâùñîùñîùñí";
    
    std::string header[] =  {
"        ‚ï≠‚îÅ‚ïÆ        ‚ï≠‚ïÆ",
"‚ï≠‚îÅ‚î≥‚îÅ‚î≥‚î≥‚î≥‚î≥‚î´‚îÅ‚ïã‚îÅ‚î≥‚î≥‚î≥‚î≥‚îÅ‚î≥‚î≥‚î´‚î£‚ïÆ",
"‚îÉ‚îÅ‚î´‚ïã‚îÉ‚îÉ‚îÉ‚ï≠‚ïã‚îÅ‚îÉ‚îª‚î´‚îÉ‚îÉ‚îÉ‚ïã‚îÉ‚ï≠‚î´‚îÅ‚î´",
"‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îª‚ïØ"
    };

std::cout << "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ (–î–∞/–ù–µ—Ç)?\n";

int current_selection = 1;
const int num_options = 2;

for (;;) {

        system(CLEAR_SCREEN);
        std::cout << "\033[31m" << separator_part1 << highlight_end << 
separator_part2 << std::endl << std::endl;
        for (const auto& line : header)
        printColorText(line+"\n", 37);
        std::cout << "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ (–î–∞/–ù–µ—Ç)?\n";
        if (current_selection == 1) {
            std::cout << highlight_start << ">–î–∞" << highlight_end << 
std::endl;
            std::cout << " –ù–µ—Ç" << std::endl;
        } else {
            std::cout << " –î–∞" << std::endl;
            std::cout << highlight_start << ">–ù–µ—Ç" << highlight_end << 
std::endl;
        }
std::cout << "\033[31m" << separator_part1 << highlight_end;

       int arrow_key = _getch();
        if(arrow_key == 0 || arrow_key == 224){
        arrow_key = _getch();
        if (arrow_key == 72){
        if(current_selection > 1){
        current_selection--;
        }
        }
        if (arrow_key == 80){
        if (current_selection < num_options){
        current_selection++;
        }
        }
        }
        if (arrow_key == 10 || arrow_key == 13){
        break;
        }
    }
    return current_selection;
}

int sort_menu(){
system(CLEAR_SCREEN);

const std::string highlight_start = "\033[1;31m";
const std::string highlight_end = "\033[0m";
std::string separator_part1 = 
"////////////////////////////////////////////////////////// ";
    std::string separator_part2 = "ùñâùñûùñìùñÜùñòùñû ùñîùñã ùñâùñîùñîùñí";
    
    std::string header[] =  {
"        ‚ï≠‚îÅ‚ïÆ        ‚ï≠‚ïÆ",
"‚ï≠‚îÅ‚î≥‚îÅ‚î≥‚î≥‚î≥‚î≥‚î´‚îÅ‚ïã‚îÅ‚î≥‚î≥‚î≥‚î≥‚îÅ‚î≥‚î≥‚î´‚î£‚ïÆ",
"‚îÉ‚îÅ‚î´‚ïã‚îÉ‚îÉ‚îÉ‚ï≠‚ïã‚îÅ‚îÉ‚îª‚î´‚îÉ‚îÉ‚îÉ‚ïã‚îÉ‚ï≠‚î´‚îÅ‚î´",
"‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îª‚ïØ"
    };

std::cout << "–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É esc" << 
std::endl;
    std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É –ø—É–Ω–∫—Ç—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É" 
<< std::endl;
    
    std::string options[] = {
    "–†–∞—Å—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç",
        "–§–ò–û",
        "–ì–æ—Ä–æ–¥",
        "–£–ª–∏—Ü–∞",
        "–î–æ–º",
        "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
        "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã",
        "–°—É–º–º–∞ –≤–∫–ª–∞–¥–∞",
        "–í—ã–π—Ç–∏"
    };
    int num_options = 9;
    
    int current_selection = 1;
    
    for(;;){
    system(CLEAR_SCREEN);
    std::cout << "\033[31m" << separator_part1 << highlight_end << 
separator_part2 << std::endl << std::endl;
    for (const auto& line : header)
        printColorText(line+"\n", 37);
    std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:\n";
        for (int i = 1; i <= num_options; ++i) {
            if (i == current_selection) {
                std::cout << highlight_start << "> " << options[i - 1] << 
highlight_end << std::endl;
            } else {
                std::cout << "  " << options[i - 1] << std::endl;
            }
        }
        std::cout << "\033[31m" << separator_part1 << highlight_end;

    int arrow_key = _getch();
    if(arrow_key == 0 || arrow_key == 224){
    arrow_key = _getch();
    if (arrow_key == 72){
    if (current_selection > 1){
    current_selection--;
    }
    }
    if (arrow_key == 80){
    if (current_selection < num_options){
    current_selection++;
    }
    }
    }
    if (arrow_key == 10 || arrow_key == 13){
    break;
    }
    }
    return current_selection;
}

int asc_desc_menu(){
system(CLEAR_SCREEN);

const std::string highlight_start = "\033[1;31m";
const std::string highlight_end = "\033[0m";
std::string separator_part1 = 
"////////////////////////////////////////////////////////// ";
    std::string separator_part2 = "ùñâùñûùñìùñÜùñòùñû ùñîùñã ùñâùñîùñîùñí";

std::cout << "–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É esc" << 
std::endl;
    std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É" << std::endl;
    
    std::string header[] =  {
"        ‚ï≠‚îÅ‚ïÆ        ‚ï≠‚ïÆ",
"‚ï≠‚îÅ‚î≥‚îÅ‚î≥‚î≥‚î≥‚î≥‚î´‚îÅ‚ïã‚îÅ‚î≥‚î≥‚î≥‚î≥‚îÅ‚î≥‚î≥‚î´‚î£‚ïÆ",
"‚îÉ‚îÅ‚î´‚ïã‚îÉ‚îÉ‚îÉ‚ï≠‚ïã‚îÅ‚îÉ‚îª‚î´‚îÉ‚îÉ‚îÉ‚ïã‚îÉ‚ï≠‚î´‚îÅ‚î´",
"‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îª‚ïØ"
    };
    
    std::string options[] = {
    "1. –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é",
        "2. –ü–æ —É–±—ã–≤–∞–Ω–∏—é"
    };
    
    int num_options = 2;
    
    int current_selection = 1;
    
    for(;;){
    system(CLEAR_SCREEN);
    std::cout << "\033[31m" << separator_part1 << highlight_end << 
separator_part2 << std::endl << std::endl;
    for (const auto& line : header)
        printColorText(line+"\n", 37);
        std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:\n";
        for (int i = 1; i <= num_options; ++i) {
            if (i == current_selection) {
                std::cout << highlight_start << "> " << options[i - 1] << 
highlight_end << std::endl;
            } else {
                std::cout << "  " << options[i - 1] << std::endl;
            }
        }
        std::cout << "\033[31m" << separator_part1 << highlight_end;
        
        int arrow_key = _getch();
        if(arrow_key == 0 || arrow_key == 224){
        arrow_key = _getch();
        if (arrow_key == 72){
        if(current_selection > 1){
        current_selection--;
        }
        }
        if (arrow_key == 80){
        if (current_selection < num_options){
        current_selection++;
        }
        }
        }
        if (arrow_key == 10 || arrow_key == 13){
        break;
        }
    }
    return current_selection;
}

int delete_menu(){
system(CLEAR_SCREEN);

const std::string highlight_start = "\033[1;31m";
const std ::string highlight_end = "\033[0m";

std::cout << "–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É esc" << 
std::endl;
    std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É –ø—É–Ω–∫—Ç—É —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫" << 
std::endl;
    std::string separator_part1 = 
"////////////////////////////////////////////////////////// ";
    std::string separator_part2 = "ùñâùñûùñìùñÜùñòùñû ùñîùñã ùñâùñîùñîùñí";
    
    std::string header[] =  {
"        ‚ï≠‚îÅ‚ïÆ        ‚ï≠‚ïÆ",
"‚ï≠‚îÅ‚î≥‚îÅ‚î≥‚î≥‚î≥‚î≥‚î´‚îÅ‚ïã‚îÅ‚î≥‚î≥‚î≥‚î≥‚îÅ‚î≥‚î≥‚î´‚î£‚ïÆ",
"‚îÉ‚îÅ‚î´‚ïã‚îÉ‚îÉ‚îÉ‚ï≠‚ïã‚îÅ‚îÉ‚îª‚î´‚îÉ‚îÉ‚îÉ‚ïã‚îÉ‚ï≠‚î´‚îÅ‚î´",
"‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îª‚ïØ"
    };
    
    std::string options[] = {
    "1. –†–∞—Å—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç",
        "2. –§–ò–û",
        "3. –ì–æ—Ä–æ–¥",
        "4. –£–ª–∏—Ü–∞",
        "5. –î–æ–º",
        "6. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
        "7. –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã"
};
int num_options = 7;

int current_selection = 1;

for(;;){
system(CLEAR_SCREEN);
std::cout << "\033[31m" << separator_part1 << highlight_end << 
separator_part2 << std::endl << std::endl;
for (const auto& line : header)
        printColorText(line+"\n", 37);
std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:\n";
        for (int i = 1; i <= num_options; ++i) {
            if (i == current_selection) {
                std::cout << highlight_start << "> " << options[i - 1] << 
highlight_end << std::endl;
            } else {
                std::cout << "  " << options[i - 1] << std::endl;
            }
        }
        std::cout << "\033[31m" << separator_part1 << highlight_end;
        
        int arrow_key = _getch();
        if(arrow_key == 0 || arrow_key == 224){
        arrow_key = _getch();
        if (arrow_key == 72){
        if (current_selection > 1){
        current_selection--;
        }
        }
        if (arrow_key == 80){
        if (current_selection < num_options){
        current_selection++;
}
        }
        }
        if (arrow_key == 10 || arrow_key == 13){
        break;
        }
}
return current_selection;
}

int ask_delete_menu(){
system(CLEAR_SCREEN);

const std::string highlight_start = "\033[1;31m";
    const std::string highlight_end = "\033[0m";
    std::string separator_part1 = 
"////////////////////////////////////////////////////////// ";
    std::string separator_part2 = "ùñâùñûùñìùñÜùñòùñû ùñîùñã ùñâùñîùñîùñí";

    std::cout << "–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É esc" << 
std::endl;
    std::cout << "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?" << std::endl;
    
    std::string header[] =  {
"        ‚ï≠‚îÅ‚ïÆ        ‚ï≠‚ïÆ",
"‚ï≠‚îÅ‚î≥‚îÅ‚î≥‚î≥‚î≥‚î≥‚î´‚îÅ‚ïã‚îÅ‚î≥‚î≥‚î≥‚î≥‚îÅ‚î≥‚î≥‚î´‚î£‚ïÆ",
"‚îÉ‚îÅ‚î´‚ïã‚îÉ‚îÉ‚îÉ‚ï≠‚ïã‚îÅ‚îÉ‚îª‚î´‚îÉ‚îÉ‚îÉ‚ïã‚îÉ‚ï≠‚î´‚îÅ‚î´",
"‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îª‚ïØ"
    };

    std::string options[] = {
        "1. –î–∞",
        "2. –ù–µ—Ç"
    };

int num_options = 2;

int current_selection = 1;

for(;;){
system(CLEAR_SCREEN);
std::cout << "\033[31m" << separator_part1 << highlight_end << 
separator_part2 << std::endl << std::endl;
for (const auto& line : header)
        printColorText(line+"\n", 37);
std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:\n";
        for (int i = 1; i <= num_options; ++i) {
            if (i == current_selection) {
                std::cout << highlight_start << "> " << options[i - 1] << 
highlight_end << std::endl;
            } else {
                std::cout << "  " << options[i - 1] << std::endl;
            }
        }
        std::cout << "\033[31m" << separator_part1 << highlight_end;
        
        int arrow_key = _getch();
        if (arrow_key == 0 || arrow_key == 224){
        arrow_key = _getch();
        if (arrow_key == 72){
        if (current_selection > 1){
        current_selection--;
        }
        }
        if (arrow_key == 80){
        if (current_selection < num_options){
        current_selection++;
        }
        }
        }
        if(arrow_key == 10 || arrow_key == 13){
        break;
        }
}
return current_selection;
}

int show_search_menu(){
    const int num_options = 7;
    const std::string highlight_start = "\033[1;31m";
    const std::string highlight_end = "\033[0m";
    std::string separator_part1 = 
"////////////////////////////////////////////////////////// ";
    std::string separator_part2 = "ùñâùñûùñìùñÜùñòùñû ùñîùñã ùñâùñîùñîùñí";
    
    std::string header[] =  {
"        ‚ï≠‚îÅ‚ïÆ        ‚ï≠‚ïÆ",
"‚ï≠‚îÅ‚î≥‚îÅ‚î≥‚î≥‚î≥‚î≥‚î´‚îÅ‚ïã‚îÅ‚î≥‚î≥‚î≥‚î≥‚îÅ‚î≥‚î≥‚î´‚î£‚ïÆ",
"‚îÉ‚îÅ‚î´‚ïã‚îÉ‚îÉ‚îÉ‚ï≠‚ïã‚îÅ‚îÉ‚îª‚î´‚îÉ‚îÉ‚îÉ‚ïã‚îÉ‚ï≠‚î´‚îÅ‚î´",
"‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îª‚ïØ"
    };
    
    std::string options[] = {
        "–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç",
        "–ò–º—è",
        "–ì–æ—Ä–æ–¥",
        "–£–ª–∏—Ü–∞",
        "–î–æ–º",
        "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
        "–ö–≤–∞—Ä—Ç–∏—Ä–∞"
    };

    int current_selection = 1;
    for (;;){
        system(CLEAR_SCREEN);
        std::cout << "\033[31m" << separator_part1 << highlight_end << 
separator_part2 << std::endl << std::endl;
        for (const auto& line : header)
        printColorText(line+"\n", 37);
        for (int i = 1; i <= num_options; ++i){ 
            if(i == current_selection){
                std::cout << highlight_start << "> " << options[i - 1] << 
highlight_end << std::endl;
            } else{
                std::cout << " " << options[i - 1] << std::endl;
            }
        }

std::cout << "\033[31m" << separator_part1 << highlight_end;
        int arrow_key = _getch();
        if (arrow_key == 0 || arrow_key == 224) {
            arrow_key = _getch();
            if (arrow_key == 72) 
            {
                if (current_selection > 1) {
                    current_selection--;
                }
            }
            else if (arrow_key == 80) 
            {
                if (current_selection < num_options) {
                    current_selection++;
                }
            }   
        }
        if (arrow_key == 10 || arrow_key == 13){
            break;
        }
    }
    return current_selection;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
void displayMenu()
{
    std::string separator_part1 = 
"////////////////////////////////////////////////////////// ";
    std::string separator_part2 = "ùñâùñûùñìùñÜùñòùñû ùñîùñã ùñâùñîùñîùñí";
    std::string header[] =  {
"        ‚ï≠‚îÅ‚ïÆ        ‚ï≠‚ïÆ",
"‚ï≠‚îÅ‚î≥‚îÅ‚î≥‚î≥‚î≥‚î≥‚î´‚îÅ‚ïã‚îÅ‚î≥‚î≥‚î≥‚î≥‚îÅ‚î≥‚î≥‚î´‚î£‚ïÆ",
"‚îÉ‚îÅ‚î´‚ïã‚îÉ‚îÉ‚îÉ‚ï≠‚ïã‚îÅ‚îÉ‚îª‚î´‚îÉ‚îÉ‚îÉ‚ïã‚îÉ‚ï≠‚î´‚îÅ‚î´",
"‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îÅ‚îª‚îÅ‚îª‚îÅ‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï∞‚îª‚ïØ"
    };
    std::string name = "–í–∞–ª–µ—Ä–∏–π –®–µ–≤—á–µ–Ω–∫–æ\n\n     ";
    std::string description = "–î–∞–Ω —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –±–∞–Ω–∫–∞. 
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Å–µ–π –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–∏–¥: "
                              "–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –ø–æ–ª, –∞–¥—Ä–µ—Å 
–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞). "
                              "–í—ã–±–µ—Ä–∏—Ç–µ 5 —É–ª–∏—Ü, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–∂–∏–≤–∞—é—Ç 
–±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∞–Ω–∫–∞, "
                              "–∏ —É–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç —ç—Ç–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.";
std::string warning = "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ!!!!!!!!!! "
  "–í —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –µ—Å—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ –ü–û =)";
    printColorText(separator_part1, 31);
    printColorText(separator_part2+" \n", 37);

    // –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    for (const auto& line : header)
        printColorText(line+"\n", 37);
    
    // –í—ã–≤–æ–¥ –∏–º–µ–Ω–∏
    printColorText(name+"\n", 31);

// –í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º —Ñ–æ–Ω–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
    std::cout << "\033[1;37;41m " << warning << "\033[m" << std::endl;

    // –í—ã–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
    std::vector<std::string> words;
    std::istringstream stream(description);
    std::string word;
    while(stream >> word)
        words.push_back(word);
    
    int lineWidth = 0;
    for (const auto& word : words) {
        if (lineWidth + word.size() > 80) {
            std::cout << std::endl;
            lineWidth = 0;
        }
        std::cout << word << ' ';
        lineWidth += word.size() + 1;
    }
    std::cout << std::endl;
    printColorText(separator_part1, 31);
    std::cin.get();
}

#endif
